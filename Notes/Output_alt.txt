package audio;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.FloatControl;
import javax.sound.sampled.Line;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.Mixer;
import javax.sound.sampled.SourceDataLine;

import main.GlobalVariables;

public class Output {
	private int mixerInfosIndex = 0;

	private AudioFormat audioFormat;
	private Mixer.Info[] mixerInfos;
	private Mixer mixerOut;
	private Line.Info[] lineInfosOut;
	private SourceDataLine sourceDataLineOut;

	private byte[] inputData;
	private int inputDataLength;

	private boolean opened = false;

	FIFO latencyCompensation;
	
	private double volume = 1; // range 0..1
	private boolean muted = false;

	public Output(AudioFormat audioFormat, int mixerInfosIndex, boolean activateLatencyCompensation) {
		this.audioFormat = audioFormat;
		this.mixerInfosIndex = mixerInfosIndex;

		updateLine(audioFormat);

		float sampleRate = audioFormat.getSampleRate();
		int sampleSizeInBits = audioFormat.getSampleSizeInBits();
		int channels = audioFormat.getChannels();

		
		int latencyCompensationBufferSize = (int) (sampleRate / GlobalVariables.getInstance().getLatencyCompensation());
		latencyCompensation = new FIFO(latencyCompensationBufferSize);
		
		inputDataLength = GlobalVariables.getInstance().getBufferSize() * channels * sampleSizeInBits / 8; //32
		inputData = new byte[inputDataLength];
	}

	public void updateLine(AudioFormat audioFormat) {
		this.audioFormat = audioFormat;
		
		if (opened)
			close();

		mixerInfos = AudioSystem.getMixerInfo();
		mixerOut = AudioSystem.getMixer(mixerInfos[mixerInfosIndex]);
		lineInfosOut = mixerOut.getSourceLineInfo();

		try {
			sourceDataLineOut = (SourceDataLine) mixerOut.getLine(lineInfosOut[0]);
		} catch (LineUnavailableException e) {
			System.out.println("Output Line Number " + mixerInfosIndex + " not available!");
			e.printStackTrace();
		}
		
		open();
	}

	public void open() {
		try {
			sourceDataLineOut.open(audioFormat);
		} catch (LineUnavailableException e) {
			System.out.println("Output Line Number " + mixerInfosIndex + " not available! (open)");
			e.printStackTrace();
		}
		sourceDataLineOut.start();
		
		opened = true;
	}

	public void close() {
		sourceDataLineOut.close();
		
		opened = false;
	}

	public double getVolume() {
		return volume;
	}

	public void setVolume(double volume) {
		this.volume = volume; //
		
		if (muted)
			volume = 0;

		FloatControl gainControl = (FloatControl) sourceDataLineOut.getControl(FloatControl.Type.MASTER_GAIN);

		float range = gainControl.getMaximum() - gainControl.getMinimum();
		float gain = (float) ((range * volume) + gainControl.getMinimum());
		gainControl.setValue(gain);
	}
	
	public void mute() {
		muted = true;
		setVolume(volume);
	}
	
	public void unmute() {
		muted = false;
		setVolume(volume);
	}

	public int getInputDataLength() {
		return inputDataLength;
	}

	public void setInputData(byte[] inputData) {
		this.inputData = inputData;

		sourceDataLineOut.write(inputData, 0, inputDataLength);
	}

	public int getMixerInfosIndex() {
		return mixerInfosIndex;
	}

	public void setMixerInfosIndex(int mixerInfosIndex) {
		this.mixerInfosIndex = mixerInfosIndex;
	}

	public SourceDataLine getSourceDataLineOut() {
		return sourceDataLineOut;
	}
}
