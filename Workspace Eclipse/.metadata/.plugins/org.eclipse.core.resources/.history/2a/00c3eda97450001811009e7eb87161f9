package midi;

import java.util.List;
import java.util.Scanner;

import javax.sound.midi.MidiDevice;
import javax.sound.midi.MidiMessage;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.MidiUnavailableException;
import javax.sound.midi.Receiver;
import javax.sound.midi.Transmitter;
import javax.swing.JOptionPane;

import audio.MixingDesk;
import main.Mairlist;
import main.Mairlist.MairlistPFLSource;
import main.Mairlist.MairlistPlayerState;

public class MidiController {
	private static MidiController instance;

	private static MidiDevice midiDevice;
	private static MidiDevice.Info[] midiDeviceInfos;

	private static int[] timestamp;
	private static double faderSampleFrequency = 10;

	public int getCurrentTimestamp() {
		return (int) System.currentTimeMillis();
	}

	public static class MIDIKey {
		public static MIDIKey FADER1 = new MIDIKey(-72, 77), BUTTONUP1 = new MIDIKey(-104, 41),
				BUTTONDOWN1 = new MIDIKey(-104, 73), FADER2 = new MIDIKey(-72, 78), BUTTONUP2 = new MIDIKey(-104, 42),
				BUTTONDOWN2 = new MIDIKey(-104, 74), FADER3 = new MIDIKey(-72, 79), BUTTONUP3 = new MIDIKey(-104, 43),
				BUTTONDOWN3 = new MIDIKey(-104, 75), FADER4 = new MIDIKey(-72, 80), BUTTONUP4 = new MIDIKey(-104, 44),
				BUTTONDOWN4 = new MIDIKey(-104, 76), FADER5 = new MIDIKey(-72, 81), BUTTONUP5 = new MIDIKey(-104, 57),
				BUTTONDOWN5 = new MIDIKey(-104, 89), FADER6 = new MIDIKey(-72, 82), BUTTONUP6 = new MIDIKey(-104, 58),
				BUTTONDOWN6 = new MIDIKey(-104, 90), FADER7 = new MIDIKey(-72, 83), BUTTONUP7 = new MIDIKey(-104, 59),
				BUTTONDOWN7 = new MIDIKey(-104, 91), FADER8 = new MIDIKey(-72, 84), BUTTONUP8 = new MIDIKey(-104, 60),
				BUTTONDOWN8 = new MIDIKey(-104, 92), BUTTONMUTE = new MIDIKey(-104, 106),
				BUTTONSOLO = new MIDIKey(-104, 107), BUTTONSELECTUP = new MIDIKey(-72, 104),
				BUTTONSELECTDOWN = new MIDIKey(-72, 105), BUTTONSELECTLEFT = new MIDIKey(-72, 106),
				BUTTONSELECTRIGHT = new MIDIKey(-72, 107);

		private int channel = 0, note_cc = 0;

		public MIDIKey(int channel, int note_cc) {
			this.channel = channel;
			this.note_cc = note_cc;
		}

		public int getChannel() {
			return channel;
		}

		public void setChannel(int channel) {
			this.channel = channel;
		}

		public int getNote_cc() {
			return note_cc;
		}

		public void setNote_cc(int note_cc) {
			this.note_cc = note_cc;
		}

		public boolean isFader() {
			if (this.equals(FADER1) || this.equals(FADER2) || this.equals(FADER3) || this.equals(FADER4)
					|| this.equals(FADER5) || this.equals(FADER6) || this.equals(FADER7) || this.equals(FADER8)) {
				return true;
			} else {
				return false;
			}
		}
	}

	private MidiController() {
		timestamp = new int[8];

		midiDeviceInfos = MidiSystem.getMidiDeviceInfo();

		String[] midiDevicesString = new String[midiDeviceInfos.length];

		for (int i = 0; i < midiDeviceInfos.length; i++) {
			midiDevicesString[i] = i + ": " + midiDeviceInfos[i].toString();
		}

		String midiDeviceChoosenString = (String) JOptionPane.showInputDialog(null, "Select the Midi Device",
				"Midi Device", JOptionPane.QUESTION_MESSAGE, null, midiDevicesString, 0);

		int midiDeviceIndex = Integer.parseInt(midiDeviceChoosenString.split(":")[0]);

		try {
			midiDevice = MidiSystem.getMidiDevice(midiDeviceInfos[midiDeviceIndex]);

			List<Transmitter> transmitters = midiDevice.getTransmitters();

			for (int j = 0; j < transmitters.size(); j++) {
				transmitters.get(j).setReceiver(new MidiInputReceiver(midiDevice.getDeviceInfo().toString()));
			}

			Transmitter trans = midiDevice.getTransmitter();
			trans.setReceiver(new MidiInputReceiver(midiDevice.getDeviceInfo().toString()));

			midiDevice.open();

		} catch (MidiUnavailableException e) {
			System.out.println("FAILED");
		}
	}

	public int[] getTimestamp() {
		return timestamp;
	}

	public void setTimestamp(int fader, int timestamp) {
		MidiController.timestamp[fader] = timestamp;
	}

	public double getFaderSampleFrequency() {
		return faderSampleFrequency;
	}

	public void setFaderSampleFrequency(double faderSampleFrequency) {
		MidiController.faderSampleFrequency = faderSampleFrequency;
	}

	public static MidiController getInstance() {
		if (instance == null) {
			instance = new MidiController();
		}
		return instance;
	}

	private static class MidiInputReceiver implements Receiver {
		public String name;

		public MidiInputReceiver(String name) {
			this.name = name;
		}

		public void send(MidiMessage msg, long timeStamp) {
			int channel = msg.getMessage()[0];
			int note_cc = msg.getMessage()[1];
			double velocity = 0;

			if (msg.getMessage().length > 2)
				velocity = msg.getMessage()[2];

			MIDIKey midikey = new MIDIKey(channel, note_cc);

			if (midikey.isFader()) {
				if (MidiController.getInstance().getCurrentTimestamp()
						- MidiController.getInstance().getTimestamp()[note_cc - 77] < (1000 / faderSampleFrequency)) {
					return;
				} else {
					MidiController.getInstance().setTimestamp(note_cc - 77,
							MidiController.getInstance().getCurrentTimestamp());
				}
			}

			if (midikey.equals(MIDIKey.BUTTONUP1)) {
				if (velocity == 127) {

				}
			} else if (midikey.equals(MIDIKey.BUTTONUP2)) {
				if (velocity == 127) {

				}
			} else if (midikey.equals(MIDIKey.BUTTONUP3)) {
				if (velocity == 127) {
					Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.PLAYER1_PFL_ONOFF);
					Mairlist.getInstance().setMairlistPFLSource(MairlistPFLSource.PLAYER1);
					MixingDesk.getInstance().togglePflActive();
				}
			} else if (midikey.equals(MIDIKey.BUTTONUP4)) {
				if (velocity == 127) {
					Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.PLAYER2_PFL_ONOFF);
					Mairlist.getInstance().setMairlistPFLSource(MairlistPFLSource.PLAYER2);
					MixingDesk.getInstance().togglePflActive();
				}
			} else if (midikey.equals(MIDIKey.BUTTONUP5)) {
				if (velocity == 127) {
					Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.CARTWALL_MODEPFL);
					Mairlist.getInstance().setMairlistPFLSource(MairlistPFLSource.CARTWALL);
					MixingDesk.getInstance().toggleCartwallActive();
				}
			} else if (midikey.equals(MIDIKey.BUTTONUP6)) {
				if (velocity == 127) {

				}
			} else if (midikey.equals(MIDIKey.BUTTONUP7)) {
				if (velocity == 127) {
					MixingDesk.getInstance().activatePhonesNormal();
				}
			} else if (midikey.equals(MIDIKey.BUTTONUP8)) {
				if (velocity == 127) {

				}
			} else if (midikey.equals(MIDIKey.BUTTONDOWN1)) {
				if (velocity == 127) {
					MixingDesk.getInstance().toggleSpeakingActive(1);
				}
			} else if (midikey.equals(MIDIKey.BUTTONDOWN2)) {
				if (velocity == 127) {
					MixingDesk.getInstance().toggleSpeakingActive(2);
				}
			} else if (midikey.equals(MIDIKey.BUTTONDOWN3)) {
				if (velocity == 127) {
					Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.PLAYER1_STARTSTOP);
				}
			} else if (midikey.equals(MIDIKey.BUTTONDOWN4)) {
				if (velocity == 127) {
					Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.PLAYER2_STARTSTOP);
				}
			} else if (midikey.equals(MIDIKey.BUTTONDOWN5)) {
				if (velocity == 127) {

				}
			} else if (midikey.equals(MIDIKey.BUTTONDOWN6)) {
				if (velocity == 127) {

				}
			} else if (midikey.equals(MIDIKey.BUTTONDOWN7)) {
				if (velocity == 127) {
					MixingDesk.getInstance().activatePhonesStdWiedergabe();
				}
			} else if (midikey.equals(MIDIKey.BUTTONDOWN8)) {
				if (velocity == 127) {

				}
			} else if (midikey.equals(MIDIKey.FADER1)) {
				if (velocity < 10) {
					velocity = 0;
				} else if (velocity >= 109) {
					velocity = 127;
				}

				MixingDesk.getInstance().getMicrophone1().setVolume(velocity / 127);
			} else if (midikey.equals(MIDIKey.FADER2)) {
				if (velocity < 10) {
					velocity = 0;
				} else if (velocity >= 109) {
					velocity = 127;
				}

				MixingDesk.getInstance().getMicrophone2().setVolume(velocity / 127);
			} else if (midikey.equals(MIDIKey.FADER3)) {
				if (velocity < 10) {
					velocity = 0;
				} else if (velocity >= 109) {
					velocity = 127;
				}

				MixingDesk.getInstance().getMairlistChannel1().setVolume(velocity / 127);
			} else if (midikey.equals(MIDIKey.FADER4)) {
				if (velocity < 10) {
					velocity = 0;
				} else if (velocity >= 109) {
					velocity = 127;
				}

				MixingDesk.getInstance().getMairlistChannel2().setVolume(velocity / 127);
			} else if (midikey.equals(MIDIKey.FADER5)) {
				if (velocity < 10) {
					velocity = 0;
				} else if (velocity >= 109) {
					velocity = 127;
				}

				MixingDesk.getInstance().getMairlistCartwall().setVolume(velocity / 127);
			} else if (midikey.equals(MIDIKey.FADER6)) {
				MixingDesk.getInstance().getStdOut().setVolume(velocity / 127);
			} else if (midikey.equals(MIDIKey.FADER7)) {
				MixingDesk.getInstance().getPhone().setVolume(velocity / 127);
			} else if (midikey.equals(MIDIKey.FADER8)) {
				MixingDesk.getInstance().getMonitor().setVolume(velocity / 127);
			} else if (midikey.equals(MIDIKey.BUTTONMUTE)) {
				if (velocity == 127) {
					MixingDesk.getInstance().toggleMonitorMuted();
				}
			} else if (midikey.equals(MIDIKey.BUTTONSOLO)) {
				if (velocity == 127) {
					Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.PLAYLIST_EXTRAPFL);
					Mairlist.getInstance().setMairlistPFLSource(MairlistPFLSource.EXTRA);
					MixingDesk.getInstance().togglePflActive();
				}
			} else if (midikey.equals(MIDIKey.BUTTONSELECTUP)) {
				if (velocity == 127) {
					Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.PLAYLIST_CURSORUP);
				}
			} else if (midikey.equals(MIDIKey.BUTTONSELECTDOWN)) {
				if (velocity == 127) {
					Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.PLAYLIST_CURSORDOWN);
				}
			} else if (midikey.equals(MIDIKey.BUTTONSELECTLEFT)) {
				if (velocity == 127) {
					Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.CARTWALL_PREVPAGE);
				}
			} else if (midikey.equals(MIDIKey.BUTTONSELECTRIGHT)) {
				if (velocity == 127) {
					Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.CARTWALL_NEXTPAGE);
				}
			}

			/*
			 * if (channel == -104) { // note if (velocity == 127) { switch
			 * (note_cc) { case 41: // Channel 1 upper key return; case 73: //
			 * Channel 1 lower key
			 * MixingDesk.getInstance().toggleSpeakingActive(1); return; case
			 * 42: // Channel 2 upper key // System.out.println("Channel 2 oben"
			 * ); return; case 74: // Channel 2 lower key
			 * MixingDesk.getInstance().toggleSpeakingActive(2); return; case
			 * 43: // Channel 3 upper key
			 * Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.
			 * PLAYER1_PFL_ONOFF);
			 * Mairlist.getInstance().setMairlistPFLSource(MairlistPFLSource.
			 * PLAYER1); MixingDesk.getInstance().togglePflActive(); return;
			 * case 75: // Channel 3 lower key
			 * Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.
			 * PLAYER1_STARTSTOP); return; case 44: // Channel 4 upper key
			 * Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.
			 * PLAYER2_PFL_ONOFF);
			 * Mairlist.getInstance().setMairlistPFLSource(MairlistPFLSource.
			 * PLAYER2); MixingDesk.getInstance().togglePflActive(); return;
			 * case 76: // Channel 4 lower key
			 * Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.
			 * PLAYER2_STARTSTOP); return; case 57: // Channel 5 upper key
			 * Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.
			 * CARTWALL_MODEPFL);
			 * Mairlist.getInstance().setMairlistPFLSource(MairlistPFLSource.
			 * CARTWALL); MixingDesk.getInstance().toggleCartwallActive();
			 * return; case 89: // Channel 5 lower key return; case 58: //
			 * Channel 6 upper key return; case 90: // Channel 6 lower key
			 * return; case 59: // Channel 7 upper key
			 * MixingDesk.getInstance().activatePhonesNormal(); return; case 91:
			 * // Channel 7 lower key
			 * MixingDesk.getInstance().activatePhonesStdWiedergabe(); return;
			 * case 60: // Channel 8 upper key return; case 92: // Channel 8
			 * lower key return; case 106: // Mute key
			 * MixingDesk.getInstance().toggleMonitorMuted(); return; case 107:
			 * // Solo key
			 * Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.
			 * PLAYLIST_EXTRAPFL);
			 * Mairlist.getInstance().setMairlistPFLSource(MairlistPFLSource.
			 * EXTRA); MixingDesk.getInstance().togglePflActive(); return; } } }
			 * else if (channel == -72) { if (note_cc < 104) { if
			 * (MidiController.getInstance().getCurrentTimestamp() -
			 * MidiController.getInstance().getTimestamp()[note_cc - 77] < (1000
			 * / faderSampleFrequency)) { return; } else {
			 * MidiController.getInstance().setTimestamp(note_cc - 77,
			 * MidiController.getInstance().getCurrentTimestamp()); } }
			 * 
			 * if (note_cc != 82 && note_cc != 83 && note_cc != 84) { if
			 * (velocity < 10) { velocity = 0; } else if (velocity >= 109) {
			 * velocity = 127; } }
			 * 
			 * switch (note_cc) { case 77: // Fader 1
			 * MixingDesk.getInstance().getMicrophone1().setVolume(velocity /
			 * 127); return; case 78: // Fader 2
			 * MixingDesk.getInstance().getMicrophone2().setVolume(velocity /
			 * 127); return; case 79: // Fader 3
			 * MixingDesk.getInstance().getMairlistChannel1().setVolume(velocity
			 * / 127); return; case 80: // Fader 4
			 * MixingDesk.getInstance().getMairlistChannel2().setVolume(velocity
			 * / 127); return; case 81: // Fader 5
			 * MixingDesk.getInstance().getMairlistCartwall().setVolume(velocity
			 * / 127); return; case 82: // Fader 6
			 * MixingDesk.getInstance().getStdOut().setVolume(velocity / 127);
			 * return; case 83: // Fader 7
			 * MixingDesk.getInstance().getPhone().setVolume(velocity / 127);
			 * return; case 84: // Fader 8
			 * MixingDesk.getInstance().getMonitor().setVolume(velocity / 127);
			 * return; case 104: // Select up if (velocity == 127)
			 * Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.
			 * PLAYLIST_CURSORUP); return; case 105: // Select down if (velocity
			 * == 127)
			 * Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.
			 * PLAYLIST_CURSORDOWN); return; case 106: // Select left if
			 * (velocity == 127)
			 * Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.
			 * CARTWALL_PREVPAGE); return; case 107: // Select right if
			 * (velocity == 127)
			 * Mairlist.getInstance().sendCommandTCP(Mairlist.CommandTCP.
			 * CARTWALL_NEXTPAGE); return; } }
			 */
		}

		public void close() {
		}

		public void sendLED(MIDIKey midikey, int color) {

		}
	}

	private class ledUpdater implements Runnable {

		@Override
		public void run() {
			if (Mairlist.getInstance().getMairlistPlayerStatePlayer1() == MairlistPlayerState.EMPTY) {

			} else if (Mairlist.getInstance().getMairlistPlayerStatePlayer1() == MairlistPlayerState.LOADED) {

			} else if (Mairlist.getInstance().getMairlistPlayerStatePlayer1() == MairlistPlayerState.PLAYING) {

			} else if (Mairlist.getInstance().getMairlistPlayerStatePlayer1() == MairlistPlayerState.STOPPED) {

			} else if (Mairlist.getInstance().getMairlistPlayerStatePlayer1() == MairlistPlayerState.EOF) {

			}

			if (Mairlist.getInstance().getMairlistPlayerStatePlayer2() == MairlistPlayerState.EMPTY) {

			} else if (Mairlist.getInstance().getMairlistPlayerStatePlayer2() == MairlistPlayerState.LOADED) {

			} else if (Mairlist.getInstance().getMairlistPlayerStatePlayer2() == MairlistPlayerState.PLAYING) {

			} else if (Mairlist.getInstance().getMairlistPlayerStatePlayer2() == MairlistPlayerState.STOPPED) {

			} else if (Mairlist.getInstance().getMairlistPlayerStatePlayer2() == MairlistPlayerState.EOF) {

			}
		}

	}
}
