import javax.sound.midi.*;

import java.util.List;
import java.util.Scanner;

public class MidiHandler {

	public MidiDevice inputDevice = null;
	public static MidiDevice outputDevice = null;

	public static class MIDIKey {
		public static MIDIKey FADER1 = new MIDIKey(-72, 77), BUTTONUP1 = new MIDIKey(-104, 41),
				BUTTONDOWN1 = new MIDIKey(-104, 73), FADER2 = new MIDIKey(-72, 78), BUTTONUP2 = new MIDIKey(-104, 42),
				BUTTONDOWN2 = new MIDIKey(-104, 74), FADER3 = new MIDIKey(-72, 79), BUTTONUP3 = new MIDIKey(-104, 43),
				BUTTONDOWN3 = new MIDIKey(-104, 75), FADER4 = new MIDIKey(-72, 80), BUTTONUP4 = new MIDIKey(-104, 44),
				BUTTONDOWN4 = new MIDIKey(-104, 76), FADER5 = new MIDIKey(-72, 81), BUTTONUP5 = new MIDIKey(-104, 57),
				BUTTONDOWN5 = new MIDIKey(-104, 89), FADER6 = new MIDIKey(-72, 82), BUTTONUP6 = new MIDIKey(-104, 58),
				BUTTONDOWN6 = new MIDIKey(-104, 90), FADER7 = new MIDIKey(-72, 83), BUTTONUP7 = new MIDIKey(-104, 59),
				BUTTONDOWN7 = new MIDIKey(-104, 91), FADER8 = new MIDIKey(-72, 84), BUTTONUP8 = new MIDIKey(-104, 60),
				BUTTONDOWN8 = new MIDIKey(-104, 92), BUTTONMUTE = new MIDIKey(-104, 106),
				BUTTONSOLO = new MIDIKey(-104, 107), BUTTONSELECTUP = new MIDIKey(-72, 104),
				BUTTONSELECTDOWN = new MIDIKey(-72, 105), BUTTONSELECTLEFT = new MIDIKey(-72, 106),
				BUTTONSELECTRIGHT = new MIDIKey(-72, 107);

		private int channel = 0, note_cc = 0;
		private LEDColor ledColor = LEDColor.OFF;

		public enum LEDColor {
			OFF(0), RED(1), YELLOW(2), GREEN(3);

			private final int color;

			LEDColor(int color) {
				this.color = color;
			}

			public int getState() {
				return color;
			}
		}

		public MIDIKey(int channel, int note_cc) {
			this.channel = channel;
			this.note_cc = note_cc;
		}

		public int getChannel() {
			return channel;
		}

		public void setChannel(int channel) {
			this.channel = channel;
		}

		public int getNote_cc() {
			return note_cc;
		}

		public void setNote_cc(int note_cc) {
			this.note_cc = note_cc;
		}

		public boolean isFader() {
			if (this.equalsMIDIKey(FADER1) || this.equalsMIDIKey(FADER2) || this.equalsMIDIKey(FADER3)
					|| this.equalsMIDIKey(FADER4) || this.equalsMIDIKey(FADER5) || this.equalsMIDIKey(FADER6)
					|| this.equalsMIDIKey(FADER7) || this.equalsMIDIKey(FADER8)) {
				return true;
			} else {
				return false;
			}
		}

		public void setLedActivated(LEDColor ledColor) {
			ShortMessage myMsg = new ShortMessage();

			if (ledColor != this.ledColor) {
				if (ledColor == LEDColor.RED) {
					try {
						myMsg.setMessage(ShortMessage.NOTE_ON, 8, this.note_cc, 15);
					} catch (InvalidMidiDataException e) {
						e.printStackTrace();
					}
				} else if (ledColor == LEDColor.YELLOW) {
					try {
						myMsg.setMessage(ShortMessage.NOTE_ON, 8, this.note_cc, 62);
					} catch (InvalidMidiDataException e) {
						e.printStackTrace();
					}
				} else if (ledColor == LEDColor.GREEN) {
					try {
						myMsg.setMessage(ShortMessage.NOTE_ON, 8, this.note_cc, 60);
					} catch (InvalidMidiDataException e) {
						e.printStackTrace();
					}
				} else if (ledColor == LEDColor.OFF) {
					try {
						myMsg.setMessage(ShortMessage.NOTE_ON, 8, this.note_cc, 12);
					} catch (InvalidMidiDataException e) {
						e.printStackTrace();
					}
				}

				try {
					outputDevice.getReceiver().send(myMsg, -1);
				} catch (MidiUnavailableException e) {
					e.printStackTrace();
				}
			}
			
			this.ledColor = ledColor;
		}

		public boolean equalsMIDIKey(MIDIKey midikey) {
			if (midikey.getChannel() == this.getChannel() && midikey.getNote_cc() == this.getNote_cc()) {
				return true;
			} else {
				return false;
			}
		}
	}

	public static void main(String[] args) throws MidiUnavailableException {
		MyMidiDevice myDevice = new MyMidiDevice();

		MidiDevice.Info[] infos = MidiSystem.getMidiDeviceInfo();

		for (int i = 0; i < infos.length; i++) {
			System.out.println(i + ": " + infos[i]);
		}

		// System.out.println("Bitte den Index des Midi-Gerätes eingeben
		// input:");
		Scanner in = new Scanner(System.in);
		// int index = in.nextInt();

		// inputDevice = MidiSystem.getMidiDevice(infos[index]);
		// inputDevice.open();

		System.out.println("Bitte den Index des Midi-Gerätes eingeben output:");
		int index2 = in.nextInt();
		in.close();

		try {
			outputDevice = MidiSystem.getMidiDevice(MidiSystem.getMidiDeviceInfo()[index2]);

			System.out.println("1");

			List<Transmitter> transmitters = outputDevice.getTransmitters();

			System.out.println("2");
			for (int j = 0; j < transmitters.size(); j++) {
				transmitters.get(j).setReceiver(new MidiInputReceiver(outputDevice.getDeviceInfo().toString()));
			}
			System.out.println("3");

			if (transmitters.size() != 0) {
				Transmitter trans = outputDevice.getTransmitter();
				System.out.println("4");
				trans.setReceiver(new MidiInputReceiver(outputDevice.getDeviceInfo().toString()));

			}
			System.out.println("5");
		} catch (MidiUnavailableException e) {
			System.out.println("FAILED pre");
		}
		try {
			outputDevice.open();

		} catch (MidiUnavailableException e) {
			System.out.println("FAILED open");
		}

		// System.out.println("input max rec " + inputDevice.getMaxReceivers());
		// System.out.println("input max tran " +
		// inputDevice.getMaxTransmitters());
		// System.out.println("input get rec " + inputDevice.getReceivers());
		// System.out.println("input get trans " +
		// inputDevice.getTransmitters());
		// System.out.println("input print " +
		// inputDevice.getReceiver().toString());
		//
		// System.out.println("output max rec " +
		// outputDevice.getMaxReceivers());
		// System.out.println("output max tran " +
		// outputDevice.getMaxTransmitters());
		// System.out.println("output get rec " + outputDevice.getReceivers());
		// System.out.println("output get trans " +
		// outputDevice.getTransmitters());
		// System.out.println("output print " +
		// outputDevice.getReceiver().toString());

		// inputDevice.getTransmitter().setReceiver(myDevice);
		// myDevice.setReceiver(outputDevice.getReceiver());

		ShortMessage myMsg = new ShortMessage();

		/*
		 * try { myMsg.setMessage(ShortMessage.CONTROL_CHANGE, 0x00, 0, 127); }
		 * catch (InvalidMidiDataException e1) { // TODO Auto-generated catch
		 * block e1.printStackTrace(); }
		 */

		// myDevice.getReceiver().send(myMsg, -1);
		// outputDevice.getReceiver().send(myMsg, -1);

		// try {
		// Thread.sleep(100000);
		// } catch (InterruptedException e1) {
		// // TODO Auto-generated catch block
		// e1.printStackTrace();
		// }

		while (true) {

			MIDIKey.BUTTONUP1.setLedActivated(true, MIDIKey.LEDColor.RED);
			MIDIKey.BUTTONUP2.setLedActivated(true, MIDIKey.LEDColor.RED);
			MIDIKey.BUTTONUP3.setLedActivated(true, MIDIKey.LEDColor.RED);
			MIDIKey.BUTTONUP4.setLedActivated(true, MIDIKey.LEDColor.RED);
			MIDIKey.BUTTONUP5.setLedActivated(true, MIDIKey.LEDColor.RED);
			MIDIKey.BUTTONUP6.setLedActivated(true, MIDIKey.LEDColor.RED);
			MIDIKey.BUTTONUP7.setLedActivated(true, MIDIKey.LEDColor.RED);
			MIDIKey.BUTTONUP8.setLedActivated(true, MIDIKey.LEDColor.RED);

			MIDIKey.BUTTONDOWN1.setLedActivated(true, MIDIKey.LEDColor.GREEN);
			MIDIKey.BUTTONDOWN2.setLedActivated(true, MIDIKey.LEDColor.GREEN);
			MIDIKey.BUTTONDOWN3.setLedActivated(true, MIDIKey.LEDColor.GREEN);
			MIDIKey.BUTTONDOWN4.setLedActivated(true, MIDIKey.LEDColor.GREEN);
			MIDIKey.BUTTONDOWN5.setLedActivated(true, MIDIKey.LEDColor.GREEN);
			MIDIKey.BUTTONDOWN6.setLedActivated(true, MIDIKey.LEDColor.GREEN);
			MIDIKey.BUTTONDOWN7.setLedActivated(true, MIDIKey.LEDColor.GREEN);
			MIDIKey.BUTTONDOWN8.setLedActivated(true, MIDIKey.LEDColor.GREEN);

			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

			MIDIKey.BUTTONUP1.setLedActivated(false, MIDIKey.LEDColor.OFF);
			MIDIKey.BUTTONUP2.setLedActivated(false, MIDIKey.LEDColor.OFF);
			MIDIKey.BUTTONUP3.setLedActivated(false, MIDIKey.LEDColor.OFF);
			MIDIKey.BUTTONUP4.setLedActivated(false, MIDIKey.LEDColor.OFF);
			MIDIKey.BUTTONUP5.setLedActivated(false, MIDIKey.LEDColor.OFF);
			MIDIKey.BUTTONUP6.setLedActivated(false, MIDIKey.LEDColor.OFF);
			MIDIKey.BUTTONUP7.setLedActivated(false, MIDIKey.LEDColor.OFF);
			MIDIKey.BUTTONUP8.setLedActivated(false, MIDIKey.LEDColor.OFF);

			MIDIKey.BUTTONDOWN1.setLedActivated(false, MIDIKey.LEDColor.OFF);
			MIDIKey.BUTTONDOWN2.setLedActivated(false, MIDIKey.LEDColor.OFF);
			MIDIKey.BUTTONDOWN3.setLedActivated(false, MIDIKey.LEDColor.OFF);
			MIDIKey.BUTTONDOWN4.setLedActivated(false, MIDIKey.LEDColor.OFF);
			MIDIKey.BUTTONDOWN5.setLedActivated(false, MIDIKey.LEDColor.OFF);
			MIDIKey.BUTTONDOWN6.setLedActivated(false, MIDIKey.LEDColor.OFF);
			MIDIKey.BUTTONDOWN7.setLedActivated(false, MIDIKey.LEDColor.OFF);
			MIDIKey.BUTTONDOWN8.setLedActivated(false, MIDIKey.LEDColor.OFF);
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

		}

		/*
		 * MidiDevice device; MidiDevice.Info[] infos =
		 * MidiSystem.getMidiDeviceInfo();
		 * 
		 * for (int i = 0; i < infos.length; i++) { System.out.println(i + ": "
		 * + infos[i]); }
		 * 
		 * System.out.println("Bitte den Index des Midi-Gerätes eingeben:");
		 * Scanner in = new Scanner(System.in); int index = in.nextInt();
		 * in.close();
		 * 
		 * Transmitter trans = null;
		 * 
		 * try { device = MidiSystem.getMidiDevice(infos[index]); // does the
		 * device have any transmitters? // if it does, add it to the device
		 * list System.out.println(infos[index]);
		 * 
		 * // get all transmitters List<Transmitter> transmitters =
		 * device.getTransmitters(); // and for each transmitter
		 * 
		 * for (int j = 0; j < transmitters.size(); j++) { // create a new
		 * receiver transmitters.get(j).setReceiver( // using my own
		 * MidiInputReceiver new
		 * MidiInputReceiver(device.getDeviceInfo().toString())); }
		 * 
		 * trans = device.getTransmitter(); trans.setReceiver(new
		 * MidiInputReceiver(device.getDeviceInfo().toString()));
		 * 
		 * // open each device device.open(); // if code gets this far without
		 * throwing an exception // print a success message
		 * System.out.println(device.getDeviceInfo() + " Was Opened");
		 * 
		 * } catch (MidiUnavailableException e) { System.out.println("FAILED");
		 * }
		 * 
		 * ShortMessage myMsg = new ShortMessage();
		 * 
		 * while (true) { try { myMsg.setMessage(ShortMessage.NOTE_ON, 0x01, 41,
		 * 15); //144/145 } catch (InvalidMidiDataException e) {
		 * e.printStackTrace(); }
		 * 
		 * trans.getReceiver().send(myMsg, -1);
		 * 
		 * try { Thread.sleep(500); } catch (InterruptedException e) {
		 * e.printStackTrace(); }
		 * 
		 * try { myMsg.setMessage(ShortMessage.NOTE_ON, 0x01, 41, 60); //0x98
		 * //128/129 } catch (InvalidMidiDataException e) { e.printStackTrace();
		 * }
		 * 
		 * trans.getReceiver().send(myMsg, -1);
		 * 
		 * try { Thread.sleep(500); } catch (InterruptedException e) {
		 * e.printStackTrace(); } }
		 */
	}

	public static class MyMidiDevice implements Transmitter, Receiver {

		private Receiver receiver;

		@Override
		public Receiver getReceiver() {
			System.out.println("get");
			return this.receiver;
		}

		@Override
		public void setReceiver(Receiver receiver) {
			this.receiver = receiver;
		}

		@Override
		public void close() {
		}

		@Override
		public void send(MidiMessage message, long timeStamp) {
			System.out.println(message); // computations
			this.getReceiver().send(message, timeStamp);
		}
	}

	// tried to write my own class. I thought the send method handles an
	// MidiEvents sent to it
	public static class MidiInputReceiver implements Receiver {
		public String name;

		public MidiInputReceiver(String name) {
			this.name = name;
		}

		public void send(MidiMessage msg, long timeStamp) {
			// for (int i = 0; i < msg.getMessage().length; i++) {
			// System.out.println("midi received " + i + ": " +
			// msg.getMessage()[i]);
			// System.out.println("midi received status " + i + ": " +
			// msg.getStatus());

			int channel = msg.getMessage()[0];
			int note_cc = msg.getMessage()[1];
			int velocity = 0;

			if (msg.getMessage().length > 2)
				velocity = msg.getMessage()[2];

			System.out.println("Channel: " + channel + " cc: " + note_cc + " vel: " + velocity);

			if (channel == -104) {
				// note
				if (velocity == 127) {
					switch (note_cc) {
					case 41:
						System.out.println("Channel 1 oben");
						return; // 1.1
					case 73:
						System.out.println("Channel 1 unten");
						return; // 1.2
					case 42:
						System.out.println("Channel 2 oben");
						return;
					case 74:
						System.out.println("Channel 2 unten");
						return;
					case 43:
						System.out.println("Channel 3 oben");
						return;
					case 75:
						System.out.println("Channel 3 unten");
						return;
					case 44:
						System.out.println("Channel 4 oben");
						return;
					case 76:
						System.out.println("Channel 4 unten");
						return;
					case 57:
						System.out.println("Channel 5 oben");
						return;
					case 89:
						System.out.println("Channel 5 unten");
						return;
					case 58:
						System.out.println("Channel 6 oben");
						return;
					case 90:
						System.out.println("Channel 6 unten");
						return;
					case 59:
						System.out.println("Channel 7 oben");
						return;
					case 91:
						System.out.println("Channel 7 unten");
						return;
					case 60:
						System.out.println("Channel 8 oben");
						return;
					case 92:
						System.out.println("Channel 8 unten");
						return;
					}
				}
			} else if (channel == -72) {
				// cc
				switch (note_cc) {
				case 77:
					System.out.println("Channel 1 " + velocity);
					return;
				case 78:
					System.out.println("Channel 2 " + velocity);
					return;
				case 79:
					System.out.println("Channel 3 " + velocity);
					return;
				case 80:
					System.out.println("Channel 4 " + velocity);
					return;
				case 81:
					System.out.println("Channel 5 " + velocity);
					return;
				case 82:
					System.out.println("Channel 6 " + velocity);
					return;
				case 83:
					System.out.println("Channel 7 " + velocity);
					return;
				case 84:
					System.out.println("Channel 8 " + velocity);
					return;
				}
			}
			// }
		}

		public void close() {
		}
	}
}
